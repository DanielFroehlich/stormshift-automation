---
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: Create VM on RHV
  hosts: localhost
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  vars:
    engine_user: admin@internal
    engine_password: "{{secret_password}}"
    engine_url: https://{{layer2_rhev_engine_fqdn}}/ovirt-engine/api
  tasks:
    - name: Login to RHV
      tags: always
      ovirt_auth:
        url: '{{ engine_url }}'
        username: '{{ engine_user }}'
        password: '{{ engine_password }}'

    - name: Add VM to Inventory
      tags: always
      changed_when: false
      add_host:
        name: "{{layer3_name}}"
        ansible_host: "{{layer3_name}}.{{ sysctx_dns_domain }}"

    - name: Create and start VM
      tags: vm
      ovirt_vm:
        auth: '{{ ovirt_auth }}'
        state: running
        name: '{{layer3_name}}'
        cluster: Default
        template: '{{layer3_vm_template}}'
        cpu_cores: '{{layer3_vm_cores}}'
        memory: '{{layer3_vm_memory}}'
        memory_guaranteed: '{{layer3_vm_memory}}'
        memory_max: '32GiB'

    - name: Wait for IP adress
      tags: vm, dns
      ovirt_vm_info:
        auth: "{{ ovirt_auth }}"
        pattern: name="{{layer3_name}}"
        follow: ["nics.reported_devices"]
      register: result
      until:
        result.ovirt_vms[0].nics[0].reported_devices[0].ips is defined
        and result.ovirt_vms[0].nics[0].reported_devices[0].ips | length > 1
      retries: 60
      delay: 1

    - name: Capture IP address
      tags: vm, dns
      set_fact:
        layer3_ip: "{{ result | json_query('ovirt_vms[0].nics[0].reported_devices[0].ips[?version==`v4`].address') | join }}"

    - name: Debug
      tags: vm
      debug:
        msg: "VM IP adress: {{ layer3_ip }}"


# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: Configure DNS
  hosts: layer1
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  tasks:
    - name: Add DNS entries
      tags: dns
      blockinfile:
        path: /etc/named/{{ sysctx_dns_domain }}.zone
        marker: "; {mark} ANSIBLE MANAGED BLOCK {{layer3_name}}"
        block: |
          {{layer3_name}} IN A {{hostvars.localhost.layer3_ip}}
          *.apps.{{layer3_name}} IN A {{hostvars.localhost.layer3_ip}}
      register: dns

    - name: Restart DNS
      tags: dns
      service:
        name: named
        enabled: yes
        state: restarted
      when: dns is changed

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
- name: Install MicroShift
  hosts: "{{layer3_name}}"
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  tasks:
    - name: Set hostname
      tags: rhsm
      hostname:
        name: "{{layer3_name}}.{{ sysctx_dns_domain }}"

    - name: Register with Red Hat Subscription Manager
      tags: rhsm,slow
      redhat_subscription:
        state: present
        username: "{{ sysctx_rhsm_user}}"
        password: "{{ sysctx_rhsm_pswd}}"
# Not needed with simple content access activated:
#        pool_ids: "{{ sysctx_rhsm_poolid_virt}}"

    - name: Enable Repos
      tags: repos, slow
      rhsm_repository:
        state: enabled
        name:
          - rhel-8-for-x86_64-appstream-rpms
          - rhel-8-for-x86_64-baseos-rpms
          - rhocp-4.12-for-rhel-8-x86_64-rpms
          - fast-datapath-for-rhel-8-x86_64-rpms

    - name: Prepare for engineering candidate Repos
      tags: repos
      template:
        src: templates/microshift-ec.repo
        dest: /etc/yum.repos.d/microshift-ec.repo

    - name: Update baseos
      tags: upd, slow
      when: layer4_update_os_to_latest
      yum:
        name: '*'
        state: latest
      register: osupdate

    - name: Reboot after os update
      tags: upd,slow
      reboot:
      when: layer4_update_os_to_latest and osupdate is changed

# TODO: Check/Verify that LVM VG "RHEL" existis and has >1G free capacity

    - name: Install oc client and cockpit (not needed, demo purposes only)
      tags: prep,rpm
      yum:
        name:
          - openshift-clients
          - cockpit
        state: present

    - name: Enable and start cockpit
      tags: prep
      service:
        name: cockpit
        enabled: yes
        state: started

    - name: Add typical commands to bash history
      tags: prep, bash
      blockinfile:
        path: /root/.bash_history
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{layer3_name}}"
        block: "{{ lookup('template', 'templates/microshift-bash-history-suggestions.j2') }}"


    - name: Create crio dir
      tags: prep,crio
      file:
        path: /etc/crio
        state: directory

    - name: Provide pull secrets
      tags: prep,crio
      copy:
        content: "{{sysctx_pull_secret}}"
        dest: /etc/crio/openshift-pull-secret
        mode: 600
        owner: root
        group: root

    - name: Create kube dir
      tags: prep,ushift
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root

    - name: Create ushift dir
      tags: prep,ushift
      file:
        path: /etc/microshift
        state: directory
        owner: root
        group: root


    - name: Provide MicroShift config file
      tags: prep,ushift
      template:
        src: templates/microshift-config.yaml.j2
        dest: /etc/microshift/config.yaml

    - name: Firewall add cluster network to trusted zone
      tags: prep, firewall
      firewalld:
        immediate: yes
        permanent: yes
        zone: trusted
        source: 10.42.0.0/16
        state: enabled

    - name: Firewall add DNS to trusted zone
      tags: prep, firewall
      firewalld:
        immediate: yes
        permanent: yes
        zone: trusted
        source: 169.254.169.1
        state: enabled

    - name: Firewall open API port for external access
      tags: prep, firewall
      firewalld:
        immediate: yes
        permanent: yes
        port: 6443/tcp
        state: enabled

    - name: Firewall open cockpit port for external access
      tags: prep, firewall
      firewalld:
        immediate: yes
        permanent: yes
        port: 9090/tcp
        state: enabled

    - name: Install MicroShift
      when: actually_install
      tags: install, slow
      yum:
        name: 'microshift'
        state: present
      register: install

    - name: Enable and start MicroShift
      when: actually_install
      tags: install, slow
      service:
        name: microshift
        enabled: yes
        state: started

    - name: Copy kubeconfig to root user on VM
      when: actually_install
      tags: install, post
      copy:
        src: /var/lib/microshift/resources/kubeadmin/kubeconfig
        remote_src: true
        dest: /root/.kube/config
        mode: 600

    - name: Replace localhost in kubeconfig with FQDN
      when: actually_install
      tags: install, post
      lineinfile:
        path: /root/.kube/config
        search_string: "    server: https://127.0.0.1:6443"
        line: "    server: https://{{layer3_name}}.{{ sysctx_dns_domain }}:6443"
        backup: true

    - name: Fetch kubeconfig from VM to deploy node
      when: actually_install
      tags: install, post
      fetch:
        src: /root/.kube/config
        dest: "/root/{{layer3_name}}_install/kubeconfig"
        flat: true

    - name: Deploy sample Workload
      tags: post,sample
      when: deploy_sample_workload
      delegate_to: 127.0.0.1
      kubernetes.core.k8s:
        kubeconfig: "/root/{{layer3_name}}_install/kubeconfig"
        validate_certs: false
        state: present
        definition: "{{ lookup('template', 'templates/microshift-sample-app.yaml.j2') }}"
