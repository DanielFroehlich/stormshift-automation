---


# ------------------------------------------------------------------------------
# This performs the OpenShift V4 Installation, following the "Bare Metal" Installation approach
# which is documented here:
# https://docs.openshift.com/container-platform/4.2/installing/installing_bare_metal/installing-bare-metal.html
# The "Step" commentes below refer to the different section headings of the installation instructions
- name: Install OpenShift4 from support node
  hosts: "{{layer3_ocp_support_host}}"
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  tasks:

# ------------------------------------------------------------------------------
# Step: Obtaining the installation program
# ------------------------------------------------------------------------------
    - name: Transfer binaries
      tags: binaries,slow
      copy:
        src: /root/ocp4binaries
        dest: /root/

    - name: Create directories
      file:
        path: "{{item}}"
        state: directory
      with_items:
        - /root/bin
        - /root/ocp4install

# ------------------------------------------------------------------------------
# Step: Installing the CLI
# ------------------------------------------------------------------------------
    - name: Extract tools to bin
      tags: binaries,slow
      unarchive:
        src: "{{item}}"
        dest: /root/bin
        remote_src: yes
        exclude:
          - README.md
      with_items:
        - /root/ocp4binaries/openshift-install-linux-{{layer3_ocp_version}}.tar.gz
        - /root/ocp4binaries/openshift-client-linux-{{layer3_ocp_version}}.tar.gz

# ------------------------------------------------------------------------------
# Step: Manually creating the installation configuration file
# ------------------------------------------------------------------------------
    - name: Provide install config
      tags: ocp4install
      template:
        src: templates/ocp4install-config.yaml.j2
        dest: "{{item}}"
      with_items:
        - /root/ocp4install/install-config.yaml
        - /root/install-config.yaml

# ------------------------------------------------------------------------------
# Step: Creating the Kubernetes manifest and Ignition config files
# ------------------------------------------------------------------------------
    - name: Create manifests
      tags: ocp4install
      command: /root/bin/openshift-install create manifests --dir=/root/ocp4install
      args:
        creates: /root/ocp4install/metadata.json

    - name: Create ignition configs
      tags: ocp4install
      command: /root/bin/openshift-install create ignition-configs --dir=/root/ocp4install
      args:
        creates: /root/ocp4install/metadata.json

# ------------------------------------------------------------------------------
# Step: Creating Red Hat Enterprise Linux CoreOS (RHCOS) machines by PXE or iPXE booting
# ------------------------------------------------------------------------------
# Prerequisites (PXE and HTTP infrastructure) have been created with
# playbook "340_ocp4_provision_infrastructure" and are used now.

    - name: Copy ignition configs to http server
      tags: rhcos,ign
      copy:
        src: /root/ocp4install/{{item}}
        dest: /var/www/html
        remote_src: yes
      with_items:
        - bootstrap.ign
        - master.ign
        - worker.ign

    - name: Copy images to http server
      tags: rhcos,img,slow
      copy:
        src: /root/ocp4binaries/{{item}}
        dest: /var/www/html
        remote_src: yes
      with_items:
        - rhcos-{{layer3_rhcos_version}}-x86_64-metal-bios.raw.gz
        - rhcos-{{layer3_rhcos_version}}-x86_64-installer-kernel

    - name: Copy images to tftp server
      tags: rhcos,img,slow
      copy:
        src: /root/ocp4binaries/{{item}}
        dest: /var/lib/tftpboot/images
        remote_src: yes
      with_items:
        - rhcos-{{layer3_rhcos_version}}-x86_64-installer-initramfs.img

# ------------------------------------------------------------------------------
# Step: Configure PXE or iPXE installation for the RHCOS images.
# ------------------------------------------------------------------------------
    - name: Provide PXE Menu
      tags: rhcos,pxe
      when: usePXE is defined
      template:
        src: templates/ocp4pxe_menu.j2
        dest: /var/lib/tftpboot/pxelinux.cfg/{{item.mac}}
      with_items:
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-06', ign: 'bootstrap.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-10', ign: 'master.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-11', ign: 'master.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-12', ign: 'master.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-20', ign: 'worker.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-21', ign: 'worker.ign' }
        - { mac: '01-{{layer3_ocp_mac_prefix_dash}}-22', ign: 'worker.ign' }



# ------------------------------------------------------------------------------
# Step: Start VMS...
# ------------------------------------------------------------------------------
- name: Start Virtual Machines
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  tasks:
    - name: Login into RHEV
      tags: boot
      ovirt_auth:
       url: "{{layer2_rhev_engine_url}}"
       username: "{{layer2_rhev_engine_user}}"
       password: "{{layer2_rhev_engine_password}}"

    - name: Start virtual machines
      tags: boot
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "{{ item.name }}"
        state: running
        wait: no
      with_items: "{{vms}}"
      changed_when: false



# ------------------------------------------------------------------------------
# Step: Wait for bootstrap to complete
# ------------------------------------------------------------------------------
- name: Post deployment stuff
  hosts: "{{layer3_ocp_support_host}}"
  gather_facts: false
  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
  tasks:
    - name: Waiting for bootstrap to complete
      command: "/root/bin/openshift-install wait-for bootstrap-complete --dir=/root/ocp4install --log-level debug"
      register: bootstrap_status
      changed_when: false
      retries: 60
      delay: 60
      until: bootstrap_status.rc == 0

# From:
# https://docs.openshift.com/container-platform/4.4/installing/installing_bare_metal/installing-bare-metal.html#installation-approve-csrs_installing-bare-metal
# oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' | xargs oc adm certificate approve

    - name: Approving the CSRs for the machines
      shell:
        cmd: |
          {%raw%}/root/bin/oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' --kubeconfig /root/ocp4install/auth/kubeconfig | xargs /root/bin/oc --kubeconfig /root/ocp4install/auth/kubeconfig adm certificate approve{%endraw%}
      register: csr
      changed_when: "'approved' in csr.stdout"
      failed_when: "csr.rc!=0 and csr.stderr is not search('one or more CSRs must be specified')"

    - name: Wait 10s for additional CSRs to be created
      pause:
          seconds: 10

    - name: Approving the CSRs for the machines again
      shell:
        cmd: |
          {%raw%}/root/bin/oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' --kubeconfig /root/ocp4install/auth/kubeconfig | xargs /root/bin/oc --kubeconfig /root/ocp4install/auth/kubeconfig adm certificate approve{%endraw%}
      register: csr
      changed_when: "'approved' in csr.stdout"
      failed_when: "csr.rc!=0 and csr.stderr is not search('one or more CSRs must be specified')"


# ------------------------------------------------------------------------------
# Step: Logging in to the cluster
# ------------------------------------------------------------------------------
#export KUBECONFIG=/root/ocp4install/auth/kubeconfig

# ------------------------------------------------------------------------------
# Step: Initial Operator configuration
# ------------------------------------------------------------------------------
# Watch the cluster components come online:
# oc get clusteroperators

# Grep for AVAILABLE (Col#3) to Be true, must be 26:
# oc get clusteroperators | awk '{print $3}' | grep True | wc -l

# ------------------------------------------------------------------------------
# Step: Image registry storage configuration
# ------------------------------------------------------------------------------
    - name: Create infra-registry pv
      tags: post,registry
      # ToDo: quite ugly to use ignore_errors :-/
      ignore_errors: yes
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: nfs-registry-storage
          spec:
            accessModes:
            - ReadWriteMany
            capacity:
              storage: 100Gi
            nfs:
              path: "{{layer3_ocp_nfs_registry_path}}"
              server: "{{layer3_ocp_nfs_server}}"
            persistentVolumeReclaimPolicy: Recycle
            claimRef:
              name: registry-storage
              namespace: openshift-image-registry

    - name: Create registry-storage pvc
      tags: post,registry
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: registry-storage
            namespace: openshift-image-registry
          spec:
            accessModes:
            - ReadWriteMany
            resources:
              requests:
                storage: 100Gi

    - name: Add pvc registry-storage to image registry and expose it
      tags: post,registry,debug
      k8s:
        state: present
        kubeconfig: "/root/ocp4install/auth/kubeconfig"
        merge_type: merge
        definition:
          kind: Config
          apiVersion: imageregistry.operator.openshift.io/v1
          metadata:
            name: cluster
          spec:
            managementState: Managed
            storage:
              pvc:
                claim: registry-storage
            defaultRoute: true
# Needs retry because Operator needs time to create that object
      failed_when: false
      register: patch_status
      retries: 18
      delay: 10
      until: patch_status.msg is not defined

#  oc get pod -n openshift-image-registry | grep Running

# See also:
# https://github.com/RedHat-EMEA-SSA-Team/hetzner-ocp4/blob/53d22c6c6c7933d53052769da82a46e03121d3f1/ansible/roles/openshift-4-cluster/tasks/post-install-storage-nfs.yml#L101

# ------------------------------------------------------------------------------
# Step: Wait for install complete
# ------------------------------------------------------------------------------
    - name: Waiting install to complete
      command: "/root/bin/openshift-install wait-for install-complete --dir=/root/ocp4install --log-level debug"
      changed_when: false
      register: install_status
      retries: 60
      delay: 60
      until: install_status.rc == 0

# ------------------------------------------------------------------------------
# Step: Shutdown & Remove Bootstrap VM
# ------------------------------------------------------------------------------
# TODO...
