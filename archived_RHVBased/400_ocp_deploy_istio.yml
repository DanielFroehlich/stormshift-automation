
# DEMO Instructions:
# Call bookinfo via CURL
#export GATEWAY_URL=$(oc -n istio-system get route istio-ingressgateway -o jsonpath='{.spec.host}')
#curl -o /dev/null -s -w "%{http_code}\n" http://$GATEWAY_URL/productpage
#while true; do curl -o /dev/null -s -w "%{http_code}\n" http://$GATEWAY_URL/productpage; done
#
# Call via Browser:
# URL: http://istio-ingressgateway-istio-system.apps.ocp3.stormshift.coe.muc.redhat.com/productpage
#
# Access Kiali:
# URL https://kiali-istio-system.apps.ocp3.stormshift.coe.muc.redhat.com/console/overview?duration=60&pi=15000

- name: Deploy istio and bookinfo demo
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - cfg/secrets_{{sysctx_instance_name}}.yml
    - cfg/stormshift.yml
  vars:
    namespace_system: "istio-system"
    namespace_demo: "istio-demo"

  tasks:
# ------------------------------------------------------
# 1. Install Operators
    - name: Install Pre-Req Operators Elastic, Jaeger, Kiali, ServiceMesh
      tags: controlplane
      register: operators
      k8s:
        state: present
        definition:
          - kind: Subscription
            apiVersion: operators.coreos.com/v1alpha1
            metadata:
              name: elasticsearch-operator
              namespace: openshift-operators
            spec:
              channel: "4.2"
              installPlanApproval: Automatic
              name: elasticsearch-operator
              source: redhat-operators
              sourceNamespace: openshift-marketplace
#              startingCSV: elasticsearch-operator.4.2.14-202001061701
          - kind: Subscription
            apiVersion: operators.coreos.com/v1alpha1
            metadata:
              name: jaeger-product
              namespace: openshift-operators
            spec:
              channel: stable
              installPlanApproval: Automatic
              name: jaeger-product
              source: redhat-operators
              sourceNamespace: openshift-marketplace
#              startingCSV: jaeger-operator.v1.13.1
          - kind: Subscription
            apiVersion: operators.coreos.com/v1alpha1
            metadata:
              name: kiali-ossm
              namespace: openshift-operators
            spec:
              channel: stable
              installPlanApproval: Automatic
              name: kiali-ossm
              source: redhat-operators
              sourceNamespace: openshift-marketplace
#              startingCSV: kiali-operator.v1.0.9
          - kind: Subscription
            apiVersion: operators.coreos.com/v1alpha1
            metadata:
              name: servicemeshoperator
              namespace: openshift-operators
            spec:
              channel: '1.0'
              installPlanApproval: Automatic
              name: servicemeshoperator
              source: redhat-operators
              sourceNamespace: openshift-marketplace
#              startingCSV: servicemeshoperator.v1.0.4

    - name: Wait for Operator Install to complete
      tags: controlplane
      shell: sleep 5s && oc get ClusterServiceVersion -n openshift-operators --no-headers | grep -v Succeeded | wc -l
      register: operatorsNotSucceded
      until: " '0' in operatorsNotSucceded.stdout"
      retries: 120
      changed_when: false
      when: operators is changed

# 2. Deploy Control Plane
    - name: Create control plane project
      tags: controlplane
      k8s:
        state: present
        definition:
          kind: Project
          apiVersion: project.openshift.io/v1
          metadata:
            name: "istio-system"
            annotations:
              openshift.io/description: "ServiceMesh Istio Control Plane"

    - name: Add allauthenticated to control plane project admins
      tags: controlplane
      k8s:
        state: present
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            creationTimestamp: null
            namespace: "istio-system"
            name: project-admin-binding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: "system:authenticated"

    - name: Deploy control plane basic install
      tags: controlplane
      k8s:
        state: present
        definition:
          apiVersion: maistra.io/v1
          kind: ServiceMeshControlPlane
          metadata:
            name: basic-install
            namespace: istio-system
          spec:
            istio:
              gateways:
                istio-egressgateway:
                  autoscaleEnabled: false
                istio-ingressgateway:
                  autoscaleEnabled: false
              mixer:
                policy:
                  autoscaleEnabled: false
                telemetry:
                  autoscaleEnabled: false
              pilot:
                autoscaleEnabled: false
                traceSampling: 100
              kiali:
                enabled: true
              grafana:
                enabled: true
              tracing:
                enabled: true
                jaeger:
                  template: all-in-one
              threeScale:
                enabled: false
      register: system

    - name: Wait for control plane to be ready (Coffe time)
      tags: controlplane
      shell: oc get ServiceMeshControlPlane -n istio-system | grep True | wc -l
      register: controlPlaneReady
      until: " '1' in controlPlaneReady.stdout"
      retries: 120
      delay: 2
      changed_when: false
      when: system is changed

# ------------------------------------------------------
# 3. Deploy bookinfo demo app
    - name: Create demo project {{namespace_demo}}
      tags: demo
      k8s:
        state: present
        definition:
          kind: Project
          apiVersion: project.openshift.io/v1
          metadata:
            name: "{{namespace_demo}}"
            annotations:
              openshift.io/description: "ServiceMesh Istio Demo Project"

    - name: Add allauthenticated as demo project admins
      tags: demo
      k8s:
        state: present
        definition:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            creationTimestamp: null
            namespace: "{{namespace_demo}}"
            name: project-admin-binding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: Group
            name: "system:authenticated"

    - name: Add demo project to ServiceMeshMemberRoll
      tags: demo
      k8s:
        state: present
        definition:
          kind: ServiceMeshMemberRoll
          apiVersion: maistra.io/v1
          metadata:
            name: default
            namespace: istio-system
          spec:
            members:
              - "{{namespace_demo}}"

    - name: "Deploy bookinfo app"
      tags: demo
      shell: "oc apply -n {{namespace_demo}} -f https://raw.githubusercontent.com/Maistra/bookinfo/maistra-1.0/bookinfo.yaml"
      register: applyApp
      changed_when: "'created' in applyApp.stdout or 'configured' in applyApp.stdout"

    - name: "Deploy bookinfo gateway"
      tags: demo
      shell: "oc apply -n {{namespace_demo}} -f https://raw.githubusercontent.com/Maistra/bookinfo/maistra-1.0/bookinfo-gateway.yaml"
      register: applyGateway
      changed_when: "'created' in applyGateway.stdout or 'configured' in applyGateway.stdout"

    - name: "Add default destination rules"
      tags: demo
      shell: "oc apply -n {{ namespace_demo }} -f https://raw.githubusercontent.com/istio/istio/release-1.1/samples/bookinfo/networking/destination-rule-all.yaml"
      register: applyRules
      changed_when: "'created' in applyRules.stdout or 'configured' in applyRules.stdout"

    - name: Wait for demo pods to start
      tags: demo
      shell: oc get pods -n "{{ namespace_demo }}" | grep -E "(1/1|2/2).*Running" | wc -l
      register: podsrunning
      until: " '6' in podsrunning.stdout"
      retries: 120
      delay: 2
      changed_when: false

# Remove it:
# oc delete project {{ namespace_demo }}
# oc delete ControlPlane/basic-install -n {{ namespace_system }}
# oc delete project {{ namespace_system }}
