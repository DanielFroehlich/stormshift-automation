---
- name: Create project-req
  redhat.openshift.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    apply: false
    definition:
      kind: Project
      apiVersion: project.openshift.io/v1
      metadata:
        name: "stormshift-{{ inventory_hostname }}"

- name: Update requestor
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    merge_type: merge
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "stormshift-{{ inventory_hostname }}"
        annotations:
          openshift.io/requester: "{{ tower_user_email }}"
          openshift.io/display-name: "StormShift Cluster {{ inventory_hostname }}"
          openshift.io/description: "Contains VMs running StormShift {{ inventory_hostname }} Cluster"

- name: Apply admin privileges to new namespace
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin
        namespace: "stormshift-{{ inventory_hostname }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: User
        name: "{{ tower_user_name }}"
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: stormshift-admins
      - kind: ServiceAccount
        name: automation
        namespace: stormshift

- name: Create etcd-encryption-key secret
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ inventory_hostname }}-etcd-encryption-key"
        namespace: "stormshift"
      data:
        key: "{{ lookup('community.general.random_string', length=32) | b64encode }}"

- name: Create pull secret
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: "{{ inventory_hostname }}-pull-secret"
        namespace: "stormshift"
      data:
        .dockerconfigjson: "{{ image_pull_secret | b64encode }}"

    
- name: Create node pool
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    state: present
    definition:
      apiVersion: hypershift.openshift.io/v1beta1
      kind: NodePool
      metadata:
        name: "{{ inventory_hostname }}-nodepool1"
        namespace: stormshift
      spec:
        arch: amd64
        clusterName: "{{ inventory_hostname }}"
        management:
          autoRepair: false
          upgradeType: Replace
        nodeDrainTimeout: 0s
        platform:
          kubevirt:
            attachDefaultNetwork: true
            compute:
              cores: "{{ worker_cores | int }}"
              memory: "{{ worker_ram_gb }}Gi"
              qosClass: Burstable
            rootVolume:
              persistent:
                size: 120Gi
                storageClass: coe-netapp-san
              type: Persistent
          type: KubeVirt
        release:
          image: "quay.io/openshift-release-dev/ocp-release:{{ openshift_version }}-x86_64"
        replicas: "{{ worker_count }}"

- name: Create hosted control plane
  register: hosted_control_plane
  kubernetes.core.k8s:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    wait: yes
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Available
      status: "True"

    state: present
    definition:
      apiVersion: hypershift.openshift.io/v1beta1
      kind: HostedCluster
      metadata:
        name: "{{ inventory_hostname }}"
        namespace: stormshift
        annotations:  
        # https://docs.redhat.com/en/documentation/red_hat_advanced_cluster_management_for_kubernetes/2.11/html/clusters/cluster_mce_overview#handling-ingressb
      spec:
        additionalTrustBundle:
          name: redhat-current-it-root-cas-for-sso
        autoscaling: {}
        controllerAvailabilityPolicy: HighlyAvailable
        # configuration: 
        #   oauth:
        #     identityProviders:
        #       - name: COE-SSO
        #         mappingMethod: add
        #         openID:
        #           ca:
        #             name: redhat-current-it-root-cas-for-sso
        #           claims:
        #             email:
        #             - email
        #             groups:
        #             - groups
        #             name:
        #             - name
        #             preferredUsername:
        #             - preferred_username
        #           clientID: "{{  oauth_hostname  }}"
        #           clientSecret:
        #             name: "{{ inventory_hostname }}-openid-client-secret-coe-sso"
        #           issuer: https://sso.coe.muc.redhat.com/realms/coe-sso
        #         type: OpenID
        #       - name: COE-SSO-Admin
        #         mappingMethod: add
        #         openID:
        #           ca:
        #             name: redhat-current-it-root-cas-for-sso
        #           claims:
        #             email:
        #             - email
        #             groups:
        #             - groups
        #             name:
        #             - name
        #             preferredUsername:
        #             - preferred_username
        #           clientID: "{{  oauth_hostname  }}"
        #           clientSecret:
        #             name: "{{ inventory_hostname }}-openid-client-secret-coe-sso"
        #           issuer: https://sso.coe.muc.redhat.com/realms/coe-sso-admin
        #         type: OpenID
        dns:
          baseDomain: "apps.{{ inventory_hostname }}.stormshift.coe.muc.redhat.com"
        etcd:
          managed:
            storage:
              persistentVolume:
                size: 8Gi
                storageClassName: lvms-for-etcd
              type: PersistentVolume
          managementType: Managed
        fips: false
        infraID: ocp3
        issuerURL: https://kubernetes.default.svc
        networking:
          clusterNetwork:
          - cidr: 10.132.0.0/14
          networkType: OVNKubernetes
          serviceNetwork:
          - cidr: 172.31.0.0/16
        olmCatalogPlacement: management
        platform:
          kubevirt:
            storageDriver:
              manual:
                storageClassMapping:
                  - guestStorageClassName: ocs-storagecluster-ceph-rbd-virtualization
                    infraStorageClassName: ocs-storagecluster-ceph-rbd-virtualization
              type: Manual
            # ToDo - false and MetalLB
            # https://docs.redhat.com/en/documentation/red_hat_advanced_cluster_management_for_kubernetes/2.11/html/clusters/cluster_mce_overview#create-hosted-clusters-kubevirt-default-ingress-dns
            baseDomainPassthrough: false
          type: KubeVirt
        pullSecret:
          name: "{{ inventory_hostname }}-pull-secret"
        release:
          image: "quay.io/openshift-release-dev/ocp-release:{{ openshift_version }}-multi"
        secretEncryption:
          aescbc:
            activeKey:
              name: "{{ inventory_hostname }}-etcd-encryption-key"
          type: aescbc
        services:
        - service: OAuthServer
          servicePublishingStrategy:
            type: Route
        - service: OIDC
          servicePublishingStrategy:
            type: Route
        - service: Konnectivity
          servicePublishingStrategy:
            type: Route
        - service: Ignition
          servicePublishingStrategy:
            type: Route
        - service: APIServer
          servicePublishingStrategy:
            type: LoadBalancer
        sshKey:
          name: coe-ssh-key

- name: Get kubeadmin password
  register: kubeadmin_password_raw
  kubernetes.core.k8s_info:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    api_version: v1
    kind: Secret
    name: "{{ hosted_control_plane.result.status.kubeadminPassword.name }}"
    namespace: stormshift

- name: Get kubeconfig
  register: kubeconfig_raw
  kubernetes.core.k8s_info:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    api_version: v1
    kind: Secret
    name: "{{ hosted_control_plane.result.status.kubeconfig.name }}"
    namespace: stormshift

- debug: var=kubeconfig_raw
- debug: var=kubeadmin_password_raw

- name: Store cluster authentfication in Vault
  community.hashi_vault.vault_kv2_write:
    url: "{{ lookup('ansible.builtin.env', 'RH_VAULT_URL' ) }}"
    auth_method: approle
    role_id: "{{ lookup('ansible.builtin.env', 'RH_VAULT_ROLE_ID' ) }}"
    secret_id: "{{ lookup('ansible.builtin.env', 'RH_VAULT_SECRET_ID' ) }}"
    ca_cert: "{{ lookup('ansible.builtin.env', 'RH_VAULT_CA_CERT_FILENAME' ) }}"
    engine_mount_point: apps

    path: "coe-lab/cluster-credential/stormshift-{{ inventory_hostname }}"
    data:
      kubeconfig: "{{ kubeconfig_raw.resources[0].data.kubeconfig  | b64decode }}"
      kubeadmin-password: "{{ kubeadmin_password_raw.resources[0].data.password  | b64decode }}"

- name: Store cluster authentfication in AAP
  awx.awx.credential:
    name: "{{ inventory_hostname }}"
    organization: stormshift
    state: present
    credential_type: "OpenShift Cluster v1"
    inputs:
      api: https://{{ hosted_control_plane.result.status.controlPlaneEndpoint.host }}:{{ hosted_control_plane.result.status.controlPlaneEndpoint.host }}
      kubeconfig: "{{ kubeconfig_raw.resources[0].data.kubeconfig  | b64decode }}"
      kubeadmin_password: "{{ kubeadmin_password_raw.resources[0].data.password  | b64decode }}"

- name: Wait of AllMachinesReady
  kubernetes.core.k8s_info:
    api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
    host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
    validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"

    api_version: hypershift.openshift.io/v1beta1
    kind: NodePool
    name: "{{ inventory_hostname }}-nodepool1"
    namespace: stormshift

    wait: yes
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: AllMachinesReady
      status: "True"

- debug: var=stormshift_cluster_features
- name: Include post-deploy-features
  ansible.builtin.include_role:
    name: "feature-{{ item }}"
    tasks_from: post-deploy-hcp.yaml
  with_items: "{{ stormshift_cluster_features | default([]) }}"
